.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_tutorials_sim_plot_SimulatePeriodic.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_sim_plot_SimulatePeriodic.py:


Simulating Periodic Signals
===========================

Simulate periodic, or oscillatory, signals.

This tutorial covers :mod:`neurodsp.sim.periodic`.



.. code-block:: python


    from neurodsp import sim, spectral
    from neurodsp.utils import create_times

    from neurodsp.plts.spectral import plot_power_spectra
    from neurodsp.plts.time_series import plot_time_series








.. code-block:: python


    # Set the random seed, for consistency simulating data
    sim.set_random_seed(0)

    # Set some general settings, to be used across all simulations
    fs = 1000







Simulate a Stationary Oscillation
---------------------------------

Let's start by simulating an oscillation. We'll start with a simple, sinuisoidal, oscillation.




.. code-block:: python


    # Simulation settings
    n_seconds = 1
    osc_freq = 6.6

    # Simulate a sinusoidal oscillation
    osc_sine = sim.sim_oscillation(n_seconds, fs, osc_freq, cycle='sine')

    # Create a times vector for our simulation
    times = create_times(n_seconds, fs)

    # Plot the simulated data, in the time domain
    plot_time_series(times, osc_sine)




.. image:: /auto_tutorials/sim/images/sphx_glr_plot_SimulatePeriodic_001.png
    :class: sphx-glr-single-img




Cycle Kernels
-------------

To simulate oscillations, we can use a sinuisoidal kernel, as above, or any of a selection
of other cycle kernels.

Different kernels represent different shapes and properties that may be useful to simulate
different aspects of periodic neural activity.

Cycle kernel options include:

- sine: a sine wave cycle
- asine: an asymmetric sine wave
- sawtooth: a sawtooth wave
- gaussian: a gaussian cycle
- exp: a cycle with exponential decay
- 2exp: a cycle with exponential rise and decay



Simulate a Shapely Oscillation
------------------------------

Next let's simulate an aymmetric oscillation, using the `asine` cycle kernel,
which stands for 'asymmetric sinuisoidal'.

Using the `asine` kernel, we can simulate arbitrary rise-decay symmetry of oscillations.

We'll plot it over our original sinuisoidal oscillation, so we can compare them.




.. code-block:: python


    # Simulate a shape-y oscillations
    osc_shape = sim.sim_oscillation(n_seconds, fs, osc_freq, cycle='asine', rdsym=.2)








.. code-block:: python


    # Plot the simulated data, in the time domain
    plot_time_series(times, [osc_sine, osc_shape], ['rdsym='+str(.5), 'rdsym='+str(.3)])




.. image:: /auto_tutorials/sim/images/sphx_glr_plot_SimulatePeriodic_002.png
    :class: sphx-glr-single-img




We can also compare these signals in the frequency.

Notice that the asymmetric oscillation has strong harmonics resulting from the
non-sinusoidal nature of the oscillation.




.. code-block:: python


    # Plot the simulated data, in the frequency domain
    freqs_sine, psd_sine = spectral.compute_spectrum(osc_sine, fs)
    freqs_shape, psd_shape = spectral.compute_spectrum(osc_shape, fs)

    plot_power_spectra([freqs_sine, freqs_shape], [psd_sine, psd_shape])




.. image:: /auto_tutorials/sim/images/sphx_glr_plot_SimulatePeriodic_003.png
    :class: sphx-glr-single-img




Simulate a Bursty Oscillation
-----------------------------

Sometimes we want to study oscillations that come and go, so it can be useful to simulate
oscillations with this property.

We can do this by controlling the probability that a burst will start or stop with
each new cycle.




.. code-block:: python


    # Settings for simulation
    osc_freq = 30
    n_seconds = 3
    enter_burst = .1
    leave_burst = .1

    # Simulate a bursty oscillation
    osc = sim.sim_bursty_oscillation(n_seconds, fs, osc_freq,
                                     enter_burst=enter_burst,
                                     leave_burst=leave_burst)
    times = create_times(n_seconds, fs)








.. code-block:: python


    # Plot the simulated data, in the time domain
    plot_time_series(times, osc, xlim=[0, n_seconds])




.. image:: /auto_tutorials/sim/images/sphx_glr_plot_SimulatePeriodic_004.png
    :class: sphx-glr-single-img




We can shorten burst duration by increasing the probability to leave bursts.




.. code-block:: python


    # Simulate a bursty oscillation, with a specified burst probability
    leave_burst = .4
    osc = sim.sim_bursty_oscillation(n_seconds, fs, osc_freq,
                                     enter_burst=enter_burst,
                                     leave_burst=leave_burst)
    times = create_times(n_seconds, fs)








.. code-block:: python


    # Plot the simulated data, in the time domain
    plot_time_series(times, osc, xlim=[0, n_seconds])




.. image:: /auto_tutorials/sim/images/sphx_glr_plot_SimulatePeriodic_005.png
    :class: sphx-glr-single-img




We can increase the number of bursts by increasing the probability to enter a burst.




.. code-block:: python


    # Simulate a bursty oscillation, with a specified burst probability
    enter_burst = .4
    osc = sim.sim_bursty_oscillation(n_seconds, fs, osc_freq,
                                     enter_burst=enter_burst,
                                     leave_burst=leave_burst)
    times = create_times(n_seconds, fs)








.. code-block:: python


    # Plot the simulated data, in the time domain
    plot_time_series(times, osc, xlim=[0, n_seconds])




.. image:: /auto_tutorials/sim/images/sphx_glr_plot_SimulatePeriodic_006.png
    :class: sphx-glr-single-img




Sphinx settings:
sphinx_gallery_thumbnail_number = 1



**Total running time of the script:** ( 0 minutes  0.324 seconds)


.. _sphx_glr_download_auto_tutorials_sim_plot_SimulatePeriodic.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_SimulatePeriodic.py <plot_SimulatePeriodic.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_SimulatePeriodic.ipynb <plot_SimulatePeriodic.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
