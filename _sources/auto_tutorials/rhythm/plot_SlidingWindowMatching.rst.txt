.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_tutorials_rhythm_plot_SlidingWindowMatching.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_rhythm_plot_SlidingWindowMatching.py:


Sliding Window Matching
=======================

Find recurrent patterns in a neural signal using Sliding Window Matching.

This tutorial primarily covers :mod:`neurodsp.rhythm.swm`.


Overview
--------

This notebook shows how to use sliding window matching (SWM) for identifying recurring
patterns in a neural signal, like the shape of an oscillatory waveform.

For more details on Sliding Window Matching see Gips et al., 2017, J Neuro Methods.




.. code-block:: python


    import numpy as np

    from neurodsp.utils import create_times
    from neurodsp.rhythm import sliding_window_matching
    from neurodsp.plts.rhythm import plot_swm_pattern
    from neurodsp.plts.time_series import plot_time_series








.. code-block:: python


    # Set the random seed, for consistency simulating data
    np.random.seed(0)







Load neural signal
------------------




.. code-block:: python


    # Load example data
    sig = np.load('../data/sample_data_1.npy')
    fs = 1000
    times = create_times(len(sig)/fs, fs)
    f_range = (13, 30)

    # Plot example signal
    plot_time_series(times, sig)




.. image:: /auto_tutorials/rhythm/images/sphx_glr_plot_SlidingWindowMatching_001.png
    :class: sphx-glr-single-img




Apply sliding window matching to neural signal
----------------------------------------------

Because we define the window length to be about 1 cycle, this should roughly extract
the waveform shape of the neural oscillation. Notice that the beta cycles have sharper
troughs than peaks, and the average window is a beta cycle with a sharp trough.

However, notice that these results change dramatically by changing the random seed.
Using more data and increasing the number of iterations helps the robustness of the algorithm.




.. code-block:: python


    # Define window length & minimum window spacing, both in seconds
    win_len = .055
    win_spacing = .2

    # Apply the sliding window matching algorithm to the time series
    avg_window, window_starts, J = sliding_window_matching(sig, fs, win_len, win_spacing,
                                                           max_iterations=500)








.. code-block:: python


    # Plot the discovered pattern
    plot_swm_pattern(avg_window)




.. image:: /auto_tutorials/rhythm/images/sphx_glr_plot_SlidingWindowMatching_002.png
    :class: sphx-glr-single-img




Sphinx settings:
sphinx_gallery_thumbnail_number = 2



**Total running time of the script:** ( 0 minutes  1.248 seconds)


.. _sphx_glr_download_auto_tutorials_rhythm_plot_SlidingWindowMatching.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_SlidingWindowMatching.py <plot_SlidingWindowMatching.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_SlidingWindowMatching.ipynb <plot_SlidingWindowMatching.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
